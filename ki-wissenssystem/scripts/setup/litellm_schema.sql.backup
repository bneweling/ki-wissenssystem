-- ===================================================================
-- LITELLM POSTGRESQL SCHEMA INITIALIZATION
-- KI-Wissenssystem - Enterprise LiteLLM Database Setup
-- Version: v1.72.6-stable compatible
-- ===================================================================

-- Enable required extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";

-- ===================================================================
-- CORE LITELLM TABLES
-- ===================================================================

-- LiteLLM Keys Management
CREATE TABLE IF NOT EXISTS "LiteLLM_VerificationToken" (
    "token" VARCHAR(255) PRIMARY KEY,
    "key_name" VARCHAR(255),
    "key_alias" VARCHAR(255),
    "team_id" VARCHAR(255),
    "user_id" VARCHAR(255),
    "models" TEXT[],
    "spend" DECIMAL(10, 2) DEFAULT 0.00,
    "max_budget" DECIMAL(10, 2),
    "user_email" VARCHAR(255),
    "user_role" VARCHAR(255),
    "allowed_cache_controls" TEXT[],
    "permissions" JSONB,
    "model_spend" JSONB DEFAULT '{}',
    "model_max_budget" JSONB DEFAULT '{}',
    "tpm_limit" INTEGER,
    "rpm_limit" INTEGER,
    "budget_duration" VARCHAR(255),
    "budget_reset_at" TIMESTAMP WITH TIME ZONE,
    "created_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    "updated_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    "expires" TIMESTAMP WITH TIME ZONE,
    "metadata" JSONB DEFAULT '{}'
);

-- Teams Management
CREATE TABLE IF NOT EXISTS "LiteLLM_TeamTable" (
    "team_id" VARCHAR(255) PRIMARY KEY,
    "team_alias" VARCHAR(255),
    "organization_id" VARCHAR(255),
    "metadata" JSONB DEFAULT '{}',
    "models" TEXT[],
    "spend" DECIMAL(10, 2) DEFAULT 0.00,
    "max_budget" DECIMAL(10, 2),
    "tpm_limit" INTEGER,
    "rpm_limit" INTEGER,
    "budget_duration" VARCHAR(255),
    "budget_reset_at" TIMESTAMP WITH TIME ZONE,
    "created_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    "updated_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    "created_by" VARCHAR(255),
    "updated_by" VARCHAR(255)
);

-- User Management
CREATE TABLE IF NOT EXISTS "LiteLLM_UserTable" (
    "user_id" VARCHAR(255) PRIMARY KEY,
    "user_email" VARCHAR(255) UNIQUE,
    "user_alias" VARCHAR(255),
    "teams" TEXT[],
    "organization_id" VARCHAR(255),
    "user_role" VARCHAR(255) DEFAULT 'user',
    "models" TEXT[],
    "spend" DECIMAL(10, 2) DEFAULT 0.00,
    "max_budget" DECIMAL(10, 2),
    "tpm_limit" INTEGER,
    "rpm_limit" INTEGER,
    "budget_duration" VARCHAR(255),
    "budget_reset_at" TIMESTAMP WITH TIME ZONE,
    "created_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    "updated_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    "metadata" JSONB DEFAULT '{}'
);

-- Organization Management
CREATE TABLE IF NOT EXISTS "LiteLLM_OrganizationTable" (
    "organization_id" VARCHAR(255) PRIMARY KEY,
    "organization_alias" VARCHAR(255),
    "metadata" JSONB DEFAULT '{}',
    "models" TEXT[],
    "spend" DECIMAL(10, 2) DEFAULT 0.00,
    "max_budget" DECIMAL(10, 2),
    "tpm_limit" INTEGER,
    "rpm_limit" INTEGER,
    "budget_duration" VARCHAR(255),
    "budget_reset_at" TIMESTAMP WITH TIME ZONE,
    "created_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    "updated_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    "created_by" VARCHAR(255),
    "updated_by" VARCHAR(255)
);

-- ===================================================================
-- SPEND TRACKING & BUDGETS
-- ===================================================================

-- Spend Logs for detailed tracking
CREATE TABLE IF NOT EXISTS "LiteLLM_SpendLogs" (
    "request_id" VARCHAR(255) PRIMARY KEY,
    "call_type" VARCHAR(255),
    "api_key" VARCHAR(255),
    "spend" DECIMAL(10, 4),
    "total_tokens" INTEGER,
    "prompt_tokens" INTEGER,
    "completion_tokens" INTEGER,
    "startTime" TIMESTAMP WITH TIME ZONE,
    "endTime" TIMESTAMP WITH TIME ZONE,
    "model" VARCHAR(255),
    "user" VARCHAR(255),
    "team_id" VARCHAR(255),
    "organization_id" VARCHAR(255),
    "metadata" JSONB DEFAULT '{}',
    "cache_hit" BOOLEAN DEFAULT FALSE,
    "cache_key" VARCHAR(255),
    "request_tags" TEXT[],
    "end_user" VARCHAR(255),
    "requester_ip_address" INET,
    "created_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Budget Alerts
CREATE TABLE IF NOT EXISTS "LiteLLM_BudgetTable" (
    "budget_id" VARCHAR(255) PRIMARY KEY,
    "max_budget" DECIMAL(10, 2),
    "soft_budget" DECIMAL(10, 2),
    "model_max_budget" JSONB DEFAULT '{}',
    "reset_at" TIMESTAMP WITH TIME ZONE,
    "user_id" VARCHAR(255),
    "team_id" VARCHAR(255),
    "organization_id" VARCHAR(255),
    "created_by" VARCHAR(255),
    "created_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    "updated_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ===================================================================
-- AUDIT LOGS & COMPLIANCE (v1.72.2+ feature)
-- ===================================================================

-- Comprehensive Audit Trail
CREATE TABLE IF NOT EXISTS "LiteLLM_AuditLog" (
    "id" UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    "updated_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    "changed_by" VARCHAR(255),
    "changed_by_api_key" VARCHAR(255),
    "table_name" VARCHAR(255),
    "object_id" VARCHAR(255),
    "before_value" JSONB,
    "updated_values" JSONB,
    "action" VARCHAR(255), -- CREATE, UPDATE, DELETE, REGENERATE
    "organization_id" VARCHAR(255),
    "team_id" VARCHAR(255),
    "user_id" VARCHAR(255),
    "metadata" JSONB DEFAULT '{}'
);

-- ===================================================================
-- RATE LIMITING & PERFORMANCE (v1.72.2+ multi-instance)
-- ===================================================================

-- Rate Limit Tracking
CREATE TABLE IF NOT EXISTS "LiteLLM_RateLimitTable" (
    "key" VARCHAR(255) PRIMARY KEY,
    "user_id" VARCHAR(255),
    "team_id" VARCHAR(255),
    "organization_id" VARCHAR(255),
    "api_key" VARCHAR(255),
    "model" VARCHAR(255),
    "requests" INTEGER DEFAULT 0,
    "tokens" BIGINT DEFAULT 0,
    "window_start" TIMESTAMP WITH TIME ZONE,
    "window_size" INTEGER, -- in seconds
    "max_requests" INTEGER,
    "max_tokens" BIGINT,
    "created_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    "updated_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Model Configuration Storage
CREATE TABLE IF NOT EXISTS "LiteLLM_ModelTable" (
    "id" SERIAL PRIMARY KEY,
    "model_name" VARCHAR(255) UNIQUE,
    "litellm_params" JSONB,
    "model_info" JSONB,
    "created_by" VARCHAR(255),
    "updated_by" VARCHAR(255),
    "created_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    "updated_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ===================================================================
-- FILE PERMISSIONS & VECTOR STORE CONTROL (v1.72.0+ feature)
-- ===================================================================

-- File Access Control
CREATE TABLE IF NOT EXISTS "LiteLLM_FileTable" (
    "file_id" VARCHAR(255) PRIMARY KEY,
    "file_name" VARCHAR(255),
    "file_path" VARCHAR(255),
    "file_size" BIGINT,
    "file_type" VARCHAR(255),
    "created_by" VARCHAR(255),
    "team_id" VARCHAR(255),
    "organization_id" VARCHAR(255),
    "permissions" JSONB DEFAULT '{}',
    "metadata" JSONB DEFAULT '{}',
    "created_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    "updated_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Vector Store Permissions
CREATE TABLE IF NOT EXISTS "LiteLLM_VectorStoreTable" (
    "vector_store_id" VARCHAR(255) PRIMARY KEY,
    "vector_store_name" VARCHAR(255),
    "created_by" VARCHAR(255),
    "team_id" VARCHAR(255),
    "organization_id" VARCHAR(255),
    "permissions" JSONB DEFAULT '{}',
    "metadata" JSONB DEFAULT '{}',
    "created_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    "updated_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ===================================================================
-- PERFORMANCE INDEXES
-- ===================================================================

-- Spend Logs Indexes (for fast queries)
CREATE INDEX IF NOT EXISTS "idx_spendlogs_api_key" ON "LiteLLM_SpendLogs" ("api_key");
CREATE INDEX IF NOT EXISTS "idx_spendlogs_user" ON "LiteLLM_SpendLogs" ("user");
CREATE INDEX IF NOT EXISTS "idx_spendlogs_team_id" ON "LiteLLM_SpendLogs" ("team_id");
CREATE INDEX IF NOT EXISTS "idx_spendlogs_model" ON "LiteLLM_SpendLogs" ("model");
CREATE INDEX IF NOT EXISTS "idx_spendlogs_starttime" ON "LiteLLM_SpendLogs" ("startTime");
CREATE INDEX IF NOT EXISTS "idx_spendlogs_created_at" ON "LiteLLM_SpendLogs" ("created_at");

-- Rate Limiting Indexes (for fast lookups)
CREATE INDEX IF NOT EXISTS "idx_ratelimit_user_id" ON "LiteLLM_RateLimitTable" ("user_id");
CREATE INDEX IF NOT EXISTS "idx_ratelimit_team_id" ON "LiteLLM_RateLimitTable" ("team_id");
CREATE INDEX IF NOT EXISTS "idx_ratelimit_api_key" ON "LiteLLM_RateLimitTable" ("api_key");
CREATE INDEX IF NOT EXISTS "idx_ratelimit_model" ON "LiteLLM_RateLimitTable" ("model");
CREATE INDEX IF NOT EXISTS "idx_ratelimit_window_start" ON "LiteLLM_RateLimitTable" ("window_start");

-- Audit Log Indexes (for compliance queries)
CREATE INDEX IF NOT EXISTS "idx_auditlog_updated_at" ON "LiteLLM_AuditLog" ("updated_at");
CREATE INDEX IF NOT EXISTS "idx_auditlog_changed_by" ON "LiteLLM_AuditLog" ("changed_by");
CREATE INDEX IF NOT EXISTS "idx_auditlog_table_name" ON "LiteLLM_AuditLog" ("table_name");
CREATE INDEX IF NOT EXISTS "idx_auditlog_action" ON "LiteLLM_AuditLog" ("action");
CREATE INDEX IF NOT EXISTS "idx_auditlog_organization_id" ON "LiteLLM_AuditLog" ("organization_id");

-- File Permissions Indexes
CREATE INDEX IF NOT EXISTS "idx_files_created_by" ON "LiteLLM_FileTable" ("created_by");
CREATE INDEX IF NOT EXISTS "idx_files_team_id" ON "LiteLLM_FileTable" ("team_id");
CREATE INDEX IF NOT EXISTS "idx_files_organization_id" ON "LiteLLM_FileTable" ("organization_id");

-- ===================================================================
-- TRIGGERS FOR AUTOMATIC UPDATES
-- ===================================================================

-- Automatic updated_at timestamp trigger
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply trigger to all tables with updated_at column
CREATE TRIGGER update_verification_token_updated_at BEFORE UPDATE ON "LiteLLM_VerificationToken" FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_team_table_updated_at BEFORE UPDATE ON "LiteLLM_TeamTable" FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_user_table_updated_at BEFORE UPDATE ON "LiteLLM_UserTable" FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_organization_table_updated_at BEFORE UPDATE ON "LiteLLM_OrganizationTable" FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_budget_table_updated_at BEFORE UPDATE ON "LiteLLM_BudgetTable" FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_ratelimit_table_updated_at BEFORE UPDATE ON "LiteLLM_RateLimitTable" FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_model_table_updated_at BEFORE UPDATE ON "LiteLLM_ModelTable" FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_file_table_updated_at BEFORE UPDATE ON "LiteLLM_FileTable" FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_vector_store_table_updated_at BEFORE UPDATE ON "LiteLLM_VectorStoreTable" FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- ===================================================================
-- INITIAL DATA SETUP
-- ===================================================================

-- Insert default team for KI-Wissenssystem
INSERT INTO "LiteLLM_TeamTable" (
    "team_id", 
    "team_alias", 
    "models", 
    "max_budget", 
    "tpm_limit", 
    "rpm_limit",
    "created_by"
) VALUES (
    'ki-system-core',
    'Core System Services',
    ARRAY['classification-primary', 'extraction-primary', 'analysis-primary', 'synthesis-primary', 'embedding-primary'],
    1000.00,
    1000000,
    1000,
    'system'
) ON CONFLICT (team_id) DO NOTHING;

-- Insert fallback team
INSERT INTO "LiteLLM_TeamTable" (
    "team_id", 
    "team_alias", 
    "models", 
    "max_budget", 
    "tpm_limit", 
    "rpm_limit",
    "created_by"
) VALUES (
    'ki-system-fallback',
    'Fallback Services',
    ARRAY['classification-fallback', 'extraction-fallback', 'synthesis-fast'],
    500.00,
    500000,
    500,
    'system'
) ON CONFLICT (team_id) DO NOTHING;

-- ===================================================================
-- PERFORMANCE VIEWS FOR MONITORING
-- ===================================================================

-- Spend Summary View
CREATE OR REPLACE VIEW "LiteLLM_SpendSummary" AS
SELECT 
    DATE_TRUNC('day', "startTime") as date,
    "model",
    "team_id",
    COUNT(*) as request_count,
    SUM("spend") as total_spend,
    SUM("total_tokens") as total_tokens,
    AVG("spend") as avg_spend_per_request,
    AVG(EXTRACT(EPOCH FROM ("endTime" - "startTime"))) as avg_response_time
FROM "LiteLLM_SpendLogs"
WHERE "startTime" >= NOW() - INTERVAL '30 days'
GROUP BY DATE_TRUNC('day', "startTime"), "model", "team_id"
ORDER BY date DESC, total_spend DESC;

-- Rate Limit Status View
CREATE OR REPLACE VIEW "LiteLLM_RateLimitStatus" AS
SELECT 
    "key",
    "user_id",
    "team_id",
    "model",
    "requests",
    "max_requests",
    ROUND(("requests"::DECIMAL / NULLIF("max_requests", 0)) * 100, 2) as request_utilization_percent,
    "tokens",
    "max_tokens",
    ROUND(("tokens"::DECIMAL / NULLIF("max_tokens", 0)) * 100, 2) as token_utilization_percent,
    "window_start",
    "updated_at"
FROM "LiteLLM_RateLimitTable"
WHERE "window_start" >= NOW() - INTERVAL '1 hour'
ORDER BY request_utilization_percent DESC;

-- ===================================================================
-- CLEANUP PROCEDURES
-- ===================================================================

-- Procedure to clean old spend logs (keep last 90 days)
CREATE OR REPLACE FUNCTION cleanup_old_spend_logs()
RETURNS INTEGER AS $$
DECLARE
    rows_deleted INTEGER;
BEGIN
    DELETE FROM "LiteLLM_SpendLogs" 
    WHERE "created_at" < NOW() - INTERVAL '90 days';
    
    GET DIAGNOSTICS rows_deleted = ROW_COUNT;
    RETURN rows_deleted;
END;
$$ LANGUAGE plpgsql;

-- Procedure to clean old rate limit entries (keep last 24 hours)
CREATE OR REPLACE FUNCTION cleanup_old_rate_limits()
RETURNS INTEGER AS $$
DECLARE
    rows_deleted INTEGER;
BEGIN
    DELETE FROM "LiteLLM_RateLimitTable" 
    WHERE "window_start" < NOW() - INTERVAL '24 hours';
    
    GET DIAGNOSTICS rows_deleted = ROW_COUNT;
    RETURN rows_deleted;
END;
$$ LANGUAGE plpgsql;

-- ===================================================================
-- COMPLETION MESSAGE
-- ===================================================================

-- Log successful schema creation
DO $$
BEGIN
    RAISE NOTICE 'LiteLLM Schema initialized successfully for KI-Wissenssystem';
    RAISE NOTICE 'Version: v1.72.6-stable compatible';
    RAISE NOTICE 'Features: Audit Logs, Rate Limiting, File Permissions, Multi-Instance Support';
    RAISE NOTICE 'Teams created: ki-system-core, ki-system-fallback';
END $$; 